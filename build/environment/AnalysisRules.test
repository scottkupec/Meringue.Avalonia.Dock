is_global = true

# EditorConfig reference: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
# NOTE: Requires **VS2019 16.3** or later

# Description: Rules specific to production code project.
root = true # Do not look for any .editorconfig in a shallower directory.

# Code files
# File header preferences
file_header_template = Copyright (C) Scott Kupec. All rights reserved.

#### .NET Coding Conventions ####
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

csharp_prefer_braces = true:error
csharp_prefer_simple_default_expression = true:error
csharp_prefer_simple_using_statement = true:error
csharp_prefer_static_local_function = true:error
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false
csharp_style_conditional_delegate_call = true:error
csharp_style_deconstructed_variable_declaration = true:error
csharp_style_expression_bodied_accessors = true:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_lambdas = true:refactoring
csharp_style_expression_bodied_local_functions = true:refactoring
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = true:none
csharp_style_inlined_variable_declaration = true:error
csharp_style_pattern_local_over_anonymous_function = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_prefer_index_operator = true:error
csharp_style_prefer_range_operator = true:error
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_throw_expression = true:error
csharp_style_unused_value_assignment_preference = discard_variable:error
csharp_style_unused_value_expression_statement_preference = discard_variable:silent
csharp_style_var_elsewhere = false:error
csharp_style_var_for_built_in_types = false:error
csharp_style_var_when_type_is_apparent = false:error
csharp_using_directive_placement = outside_namespace:error

dotnet_code_quality_unused_parameters = non_public:error

dotnet_naming_rule.all_statics_members_must_be_pascal_case.severity = error
dotnet_naming_rule.all_statics_members_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.all_statics_members_must_be_pascal_case.symbols = all_statics_members
dotnet_naming_rule.async_methods_must_end_with_async.severity = error
dotnet_naming_rule.async_methods_must_end_with_async.style = end_in_async_style
dotnet_naming_rule.async_methods_must_end_with_async.symbols = method_symbols
dotnet_naming_rule.interface_should_be_begins_with_i.severity = error
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.severity = error
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.symbols = method_and_property_symbols
dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = error
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_static_field_members_must_be_lower_case.severity = error
dotnet_naming_rule.non_static_field_members_must_be_lower_case.style = camel_case
dotnet_naming_rule.non_static_field_members_must_be_lower_case.symbols = non_static_field_members
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.severity = error
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.style = pascal_case
dotnet_naming_rule.static_readonly_fields_must_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.types_should_be_pascal_case.severity = error
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.types_should_be_pascal_case.symbols = types

dotnet_naming_style.begins_with_i.capitalization = pascal_case
dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.camel_case.capitalization = camel_case
dotnet_naming_style.camel_case.required_prefix =
dotnet_naming_style.camel_case.required_suffix =
dotnet_naming_style.camel_case.word_separator =
dotnet_naming_style.end_in_async_style.capitalization = pascal_case
dotnet_naming_style.end_in_async_style.required_prefix =
dotnet_naming_style.end_in_async_style.required_suffix = Async
dotnet_naming_style.end_in_async_style.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case
dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =

dotnet_naming_symbols.all_statics_members.applicable_accessibilities = *
dotnet_naming_symbols.all_statics_members.applicable_kinds = field, local
dotnet_naming_symbols.all_statics_members.required_modifiers = static
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.required_modifiers = *
dotnet_naming_symbols.method_and_property_symbols.applicable_accessibilities = *
dotnet_naming_symbols.method_and_property_symbols.applicable_kinds = method, property
dotnet_naming_symbols.method_symbols.applicable_kinds = method
#dotnet_naming_symbols.method_symbols.required_modifiers = async # async tests don't need to end in async.
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_static_field_members.applicable_accessibilities = *
dotnet_naming_symbols.non_static_field_members.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.applicable_accessibilities = *
dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum

dotnet_sort_system_directives_first = true
dotnet_style_coalesce_expression = true:error
dotnet_style_collection_initializer = true:error
dotnet_style_explicit_tuple_names = true:error
dotnet_style_null_propagation = true:error
dotnet_style_object_initializer = true:none
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:error
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:error
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:error
dotnet_style_predefined_type_for_locals_parameters_members = false:error
dotnet_style_predefined_type_for_member_access = false:error
dotnet_style_prefer_auto_properties = true:error
dotnet_style_prefer_compound_assignment = true:error
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:error
dotnet_style_prefer_inferred_anonymous_type_member_names = true:error
dotnet_style_prefer_inferred_tuple_names = true:error
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error
dotnet_style_prefer_simplified_interpolation = true:error
dotnet_style_qualification_for_event = true:error
dotnet_style_qualification_for_field = true:error
dotnet_style_qualification_for_method = true:error
dotnet_style_qualification_for_property = true:error
dotnet_style_readonly_field = true:error
dotnet_style_require_accessibility_modifiers = for_non_interface_members:error

# Default severity for analyzer diagnostics - Requires **VS2019 16.5** or later
# NOTE: This only applies to rules enabled by default.  If a rule isn't enabled by
#       default, it must be explicitly configured. The default rules may change with
#       .NET versions.
#       We explicitly configure as much as possible and set this to help enable new
#       analyzers that may be introduced.
dotnet_analyzer_diagnostic.severity = error

dotnet_diagnostic.CA1000.severity = error  # Rules on by default that are DISABLED # Do not declare static members on generic types.
dotnet_diagnostic.CA1001.severity = error # Rules that off by default that are ENABLED # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1006.severity = error # Do not nest generic types in member signatures
dotnet_diagnostic.CA1009.severity = error # Declare event handlers correctly
dotnet_diagnostic.CA1016.severity = error # Mark assemblies with AssemblyVersionAttribute
dotnet_diagnostic.CA1020.severity = none  # Avoid namespaces with few types
dotnet_diagnostic.CA1021.severity = none  # Avoid out parameters
dotnet_diagnostic.CA1026.severity = error # Default parameters should not be used
dotnet_diagnostic.CA1031.severity = none  # Do not catch general exception types - Acceptable for tests
dotnet_diagnostic.CA1033.severity = error # Interface methods should be callable by child types
dotnet_diagnostic.CA1034.severity = error # Nested types should not be visible
dotnet_diagnostic.CA1046.severity = error # Do not overload operator equals on reference types
dotnet_diagnostic.CA1049.severity = error # Types that own native resources should be disposable
dotnet_diagnostic.CA1050.severity = error # Declare types in namespaces
dotnet_diagnostic.CA1051.severity = error # Do declare visible instance fields.
dotnet_diagnostic.CA1054.severity = error # Uri parameters should be Uris.
dotnet_diagnostic.CA1056.severity = error # Uri properties should be Uris.
dotnet_diagnostic.CA1060.severity = error # Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1061.severity = error # Do not hide base class methods
dotnet_diagnostic.CA1062.severity = error # Validate arguments of public methods
dotnet_diagnostic.CA1063.severity = error # Implement IDisposable correctly
dotnet_diagnostic.CA1064.severity = error # Exceptions should be public.
dotnet_diagnostic.CA1065.severity = error # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1068.severity = error # Cancellation token should be last parameter.
dotnet_diagnostic.CA1301.severity = error # Avoid duplicate accelerators
dotnet_diagnostic.CA1303.severity = error # Do not pass literals as localized parameters.
dotnet_diagnostic.CA1304.severity = error # Specify CultureInfo
dotnet_diagnostic.CA1305.severity = none  # Specify IFormatProvider
dotnet_diagnostic.CA1306.severity = error # Set locale for data types
dotnet_diagnostic.CA1307.severity = error # Use correct localization functions.
dotnet_diagnostic.CA1308.severity = error # Use ToUpper instead of ToLower.
dotnet_diagnostic.CA1309.severity = error # Use ordinal StringComparison
dotnet_diagnostic.CA1311.severity = error # Specify a culture or use an invariant version
dotnet_diagnostic.CA1400.severity = error # P/Invoke entry points should exist
dotnet_diagnostic.CA1401.severity = error # P/Invokes should not be visible
dotnet_diagnostic.CA1403.severity = error # Auto layout types should not be COM visible
dotnet_diagnostic.CA1404.severity = error # Call GetLastError immediately after P/Invoke
dotnet_diagnostic.CA1405.severity = error # COM visible type base types should be COM visible
dotnet_diagnostic.CA1410.severity = error # COM registration methods should be matched
dotnet_diagnostic.CA1415.severity = error # Declare P/Invokes correctly
dotnet_diagnostic.CA1500.severity = error # Variable names should not match field names
dotnet_diagnostic.CA1703.severity = error # Resource strings should be spelled correctly
dotnet_diagnostic.CA1707.severity = none # Identifiers should not contain underscores. ## Used in test names.
dotnet_diagnostic.CA1711.severity = error # Identifiers should not have incorrect suffix 
dotnet_diagnostic.CA1715.severity = error # Name generic type parameters correctly.
dotnet_diagnostic.CA1719.severity = error # Parameter names should not match member names
dotnet_diagnostic.CA1724.severity = error # Don't define types with conflicting names.
dotnet_diagnostic.CA1725.severity = error # Parameter names should match base declaration
dotnet_diagnostic.CA1727.severity = error # Use PascalCase for named placeholders
dotnet_diagnostic.CA1801.severity = error # Remove unused parameters.
dotnet_diagnostic.CA1802.severity = error # Use const for const fields.
dotnet_diagnostic.CA1805.severity = none # Member is explicitly initialized to its default value. (Being explicit is seldom bad)
dotnet_diagnostic.CA1812.severity = none # Remove uninstantiated internal classes. Test classes are instantiate by the test framework.
dotnet_diagnostic.CA1816.severity = error # Use IDisposable correctly.
dotnet_diagnostic.CA1821.severity = error # Remove empty finalizers
dotnet_diagnostic.CA1822.severity = error # Mark method static.
dotnet_diagnostic.CA1823.severity = error # Remove unused fields.
dotnet_diagnostic.CA1824.severity = error # Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1827.severity = error # Use Any() instead of Count().
dotnet_diagnostic.CA1829.severity = error # Use Count property instead of Count() method.
dotnet_diagnostic.CA1841.severity = error # Prefer Dictionary Contains methods.
dotnet_diagnostic.CA1848.severity = error # Use LoggerMesssage pattern
dotnet_diagnostic.CA1852.severity = error # Seal internal types
dotnet_diagnostic.CA1853.severity = error # Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1854.severity = error # Prefer the IDictionary.TryGetValue(TKey, out TValue) method.
dotnet_diagnostic.CA1900.severity = error # Value type fields should be portable
dotnet_diagnostic.CA1901.severity = error # P/Invoke declarations should be portable
dotnet_diagnostic.CA2000.severity = error # Correctly dispose of disposale object.
dotnet_diagnostic.CA2002.severity = error # Do not lock on objects with weak identity
dotnet_diagnostic.CA2007.severity = error # Use ConfigureAwait()
dotnet_diagnostic.CA2100.severity = error # Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2101.severity = error # Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2108.severity = error # Review declarative security on value types
dotnet_diagnostic.CA2111.severity = error # Pointers should not be visible
dotnet_diagnostic.CA2112.severity = error # Secured types should not expose fields
dotnet_diagnostic.CA2114.severity = error # Method security should be a superset of type
dotnet_diagnostic.CA2116.severity = error # APTCA methods should only call APTCA methods
dotnet_diagnostic.CA2117.severity = error # APTCA types should only extend APTCA base types
dotnet_diagnostic.CA2122.severity = error # Do not indirectly expose methods with link demands
dotnet_diagnostic.CA2123.severity = error # Override link demands should be identical to base
dotnet_diagnostic.CA2124.severity = error # Wrap vulnerable finally clauses in outer try
dotnet_diagnostic.CA2126.severity = error # Type link demands require inheritance demands
dotnet_diagnostic.CA2131.severity = error # Security critical types may not participate in type equivalence
dotnet_diagnostic.CA2132.severity = error # Default constructors must be at least as critical as base type default constructors
dotnet_diagnostic.CA2133.severity = error # Delegates must bind to methods with consistent transparency
dotnet_diagnostic.CA2134.severity = error # Methods must keep consistent transparency when overriding base methods
dotnet_diagnostic.CA2137.severity = error # Transparent methods must contain only verifiable IL
dotnet_diagnostic.CA2138.severity = error # Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute
dotnet_diagnostic.CA2140.severity = error # Transparent code must not reference security critical items
dotnet_diagnostic.CA2141.severity = error # Transparent methods must not satisfy LinkDemands
dotnet_diagnostic.CA2146.severity = error # Types must be at least as critical as their base types and interfaces
dotnet_diagnostic.CA2147.severity = error # Transparent methods may not use security asserts
dotnet_diagnostic.CA2149.severity = error # Transparent methods must not call into native code
dotnet_diagnostic.CA2200.severity = error # Rethrow to preserve stack details
dotnet_diagnostic.CA2201.severity = none  # Don't throw base exception  - Acceptable for tests
dotnet_diagnostic.CA2202.severity = error # Do not dispose objects multiple times
dotnet_diagnostic.CA2204.severity = error # Literals should be spelled correctly
dotnet_diagnostic.CA2207.severity = error # Initialize value type static fields inline
dotnet_diagnostic.CA2212.severity = error # Do not mark serviced components with WebMethod
dotnet_diagnostic.CA2213.severity = error # Disposable fields should be disposed
dotnet_diagnostic.CA2214.severity = error # Do not call overridable methods in constructors
dotnet_diagnostic.CA2216.severity = error # Disposable types should declare finalizer
dotnet_diagnostic.CA2220.severity = error # Finalizers should call base class finalizer
dotnet_diagnostic.CA2227.severity = none  # Collection properties should not be settable. - Acceptable for tests
dotnet_diagnostic.CA2229.severity = error # Implement serialization constructors
dotnet_diagnostic.CA2231.severity = error # Overload operator equals on overriding ValueType.Equals
dotnet_diagnostic.CA2232.severity = error # Mark Windows Forms entry points with STAThread
dotnet_diagnostic.CA2235.severity = error # Mark all non-serializable fields
dotnet_diagnostic.CA2236.severity = error # Call base class methods on ISerializable types
dotnet_diagnostic.CA2237.severity = error # Mark ISerializable types with SerializableAttribute
dotnet_diagnostic.CA2238.severity = error # Implement serialization methods correctly
dotnet_diagnostic.CA2240.severity = error # Implement ISerializable correctly
dotnet_diagnostic.CA2241.severity = error # Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity = error # Test for NaN correctly
dotnet_diagnostic.CA2254.severity = error # Template should be a static expression.
dotnet_diagnostic.CA5350.severity = error # Don't use weak cryptography.

dotnet_diagnostic.CS1520.severity = none  # Use primary constructor.
dotnet_diagnostic.CS1591.severity = none  # Missing XML documentation  - Acceptable for tests

dotnet_diagnostic.IDE0001.severity = none  # Name can be simplified
dotnet_diagnostic.IDE0002.severity = none  # Name can be simplified
dotnet_diagnostic.IDE0003.severity = none  # Name can be simplified
dotnet_diagnostic.IDE0004.severity = error # Cast is redundant.
dotnet_diagnostic.IDE0010.severity = error # Populate switch.
dotnet_diagnostic.IDE0011.severity = error # Add braces
dotnet_diagnostic.IDE0017.severity = errpr # Object initialization can be simplified.
dotnet_diagnostic.IDE0022.severity = suggestion # Use block body for methods
dotnet_diagnostic.IDE0043.severity = error  # Format string contains invalid placeholder
dotnet_diagnostic.IDE0045.severity = suggestion # 'if' statement can be simplified.
dotnet_diagnostic.IDE0046.severity = suggestion # 'if' statement can be simplified.
dotnet_diagnostic.IDE0049.severity = error # Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0051.severity = error # Remove unused private member
dotnet_diagnostic.IDE0052.severity = error # Remove unread private member
dotnet_diagnostic.IDE0055.severity = error # Controlled by a bunch of options: https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/csharp-formatting-options
dotnet_diagnostic.IDE0058.severity = none  # Remove unnecessary expression value # Mock setup returns are generally ignored.
dotnet_diagnostic.IDE0066.severity = error # Use 'switch'.
dotnet_diagnostic.IDE0072.severity = error # Populate switch (Yes, same as IDE0010).
dotnet_diagnostic.IDE0073.severity = error # require file header
dotnet_diagnostic.IDE0079.severity = silent # Remove unnecessary suppression. Fails to know about too many valid suppressions.
dotnet_diagnostic.IDE0090.severity = error # Simplify new expression
dotnet_diagnostic.IDE0120.severity = error # Simplify LINQ statement.
dotnet_diagnostic.IDE0130.severity = none  # Namespace does not match folder structure. - .UnitTests should be at the end of the namespace
dotnet_diagnostic.IDE1006.severity = error # Lambda can be removed.
dotnet_diagnostic.IDE0200.severity = error # Lambda can be removed.
dotnet_diagnostic.IDE0290.severity = silent # Use primary constructor
dotnet_diagnostic.IDE2002.severity = error # Simplify member access

dotnet_diagnostic.SA0001.severity = error # Special rules # All diagnostics of XML documentation comments has been disabled due to the current project configuration.
dotnet_diagnostic.SA0002.severity = error # The stylecop.json settings file could not be loaded due to a deserialization error.
dotnet_diagnostic.SA1000.severity = silent # Now covered by IDE0055
dotnet_diagnostic.SA1001.severity = error # The spacing around a comma is incorrect, within a C# code file.
dotnet_diagnostic.SA1002.severity = error # The spacing around a semicolon is incorrect, within a C# code file.
dotnet_diagnostic.SA1003.severity = error # The spacing around an operator symbol is incorrect, within a C# code file.
dotnet_diagnostic.SA1004.severity = error # A line within a documentation header above a C# element does not begin with a single space.
dotnet_diagnostic.SA1005.severity = error # A single-line comment within a C# code file does not begin with a single space.
dotnet_diagnostic.SA1006.severity = error # A C# preprocessor-type keyword is preceded by space.
dotnet_diagnostic.SA1007.severity = error # The operator keyword within a C# operator overload method is not followed by any whitespace.
dotnet_diagnostic.SA1008.severity = none # An opening parenthesis within a C# statement is not spaced correctly.  Conflicts with IDE0055 in range operations
dotnet_diagnostic.SA1009.severity = error # A closing parenthesis within a C# statement is not spaced correctly.
dotnet_diagnostic.SA1010.severity = none # An opening square bracket within a C# statement is not spaced correctly. Conflicts with new-style initialization of lists
dotnet_diagnostic.SA1011.severity = error # A closing square bracket within a C# statement is not spaced correctly.
dotnet_diagnostic.SA1012.severity = error # An opening brace within a C# element is not spaced correctly.
dotnet_diagnostic.SA1013.severity = error # A closing brace within a C# element is not spaced correctly.
dotnet_diagnostic.SA1014.severity = error # An opening generic bracket within a C# element is not spaced correctly.
dotnet_diagnostic.SA1015.severity = error # A closing generic bracket within a C# element is not spaced correctly.
dotnet_diagnostic.SA1016.severity = error # An opening attribute bracket within a C# element is not spaced correctly.
dotnet_diagnostic.SA1017.severity = error # A closing attribute bracket within a C# element is not spaced correctly.
dotnet_diagnostic.SA1018.severity = error # A nullable type symbol within a C# element is not spaced correctly.
dotnet_diagnostic.SA1019.severity = error # The spacing around a member access symbol is incorrect, within a C# code file.
dotnet_diagnostic.SA1020.severity = error # An increment or decrement symbol within a C# element is not spaced correctly.
dotnet_diagnostic.SA1021.severity = error # A negative sign within a C# element is not spaced correctly.
dotnet_diagnostic.SA1022.severity = error # A positive sign within a C# element is not spaced correctly.
dotnet_diagnostic.SA1023.severity = error # A dereference symbol or an access-of symbol within a C# element is not spaced correctly.
dotnet_diagnostic.SA1024.severity = error # A colon within a C# element is not spaced correctly.
dotnet_diagnostic.SA1025.severity = error # The code contains multiple whitespace characters in a row.
dotnet_diagnostic.SA1026.severity = error # An implicitly typed new array allocation within a C# code file is not spaced correctly.
dotnet_diagnostic.SA1027.severity = error # The code contains a tab or space character which is not consistent with the current project settings.
dotnet_diagnostic.SA1028.severity = error # A line of code ends with a space, tab, or other whitespace characters before the end of line character(s).
dotnet_diagnostic.SA1100.severity = none  # Readability Rules # A call to a member from an inherited class begins with base., and the local class does not contain an override or implementation of the member.
dotnet_diagnostic.SA1101.severity = error # A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file.
dotnet_diagnostic.SA1102.severity = error # A C# query clause does not begin on the same line as the previous clause, or on the next line.
dotnet_diagnostic.SA1103.severity = error # The clauses within a C# query expression are not all placed on the same line, and each clause is not placed on its own line.
dotnet_diagnostic.SA1104.severity = error # A clause within a C# query expression begins on the same line as the previous clause, when the previous clause spans across multiple lines.
dotnet_diagnostic.SA1105.severity = error # A clause within a C# query expression spans across multiple lines, and does not begin on its own line.
dotnet_diagnostic.SA1106.severity = error # The C# code contains an extra semicolon.
dotnet_diagnostic.SA1107.severity = error # The C# code contains more than one statement on a single line.
dotnet_diagnostic.SA1108.severity = error # A C# statement contains a comment between the declaration of the statement and the opening brace of the statement.
dotnet_diagnostic.SA1109.severity = error # A C# statement contains a region tag between the declaration of the statement and the opening brace of the statement.
dotnet_diagnostic.SA1110.severity = error # The opening parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the method or indexer name.
dotnet_diagnostic.SA1111.severity = error # The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the last parameter.
dotnet_diagnostic.SA1112.severity = error # The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the opening bracket when the element does not take any parameters.
dotnet_diagnostic.SA1113.severity = error # A comma between two parameters in a call to a C# method or indexer, or in the declaration of a method or indexer, is not placed on the same line as the previous parameter.
dotnet_diagnostic.SA1114.severity = error # The start of the parameter list for a method or indexer call or declaration does not begin on the same line as the opening bracket, or on the line after the opening bracket.
dotnet_diagnostic.SA1115.severity = error # A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous parameter, or on the next line.
dotnet_diagnostic.SA1116.severity = error # The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket.
dotnet_diagnostic.SA1117.severity = error # The parameters to a C# method or indexer call or declaration are not all on the same line or each on a separate line.
dotnet_diagnostic.SA1118.severity = error # A parameter to a C# method or indexer, other than the first parameter, spans across multiple lines.
dotnet_diagnostic.SA1119.severity = error # Maintainability rules # A C# statement contains parenthesis which are unnecessary and should be removed.
dotnet_diagnostic.SA1120.severity = error # The C# comment does not contain any comment text.
dotnet_diagnostic.SA1121.severity = silent # The code uses one of the basic C# types, but does not use the built-in alias for the type.
dotnet_diagnostic.SA1122.severity = error # The C# code includes an empty string, written as "".
dotnet_diagnostic.SA1123.severity = error # The C# code contains a region within the body of a code element.
dotnet_diagnostic.SA1124.severity = error # The C# code contains a region.
dotnet_diagnostic.SA1125.severity = error # The Nullable type has been defined not using the C# shorthand.
dotnet_diagnostic.SA1126.severity = error # A call to a member is not prefixed with the 'this.', 'base.', 'object.' or 'typename.' prefix to indicate the intended method call, within a C# code file.
dotnet_diagnostic.SA1127.severity = error # A generic constraint on a type or method declaration is on the same line as the declaration, within a C# code file.
dotnet_diagnostic.SA1128.severity = error # A constructor initializer is on the same line as the constructor declaration, within a C# code file.
dotnet_diagnostic.SA1129.severity = error # A value type was constructed using the syntax new T().
dotnet_diagnostic.SA1130.severity = error # An anonymous method was declared using the form delegate (parameters) { }, when a lambda expression would provide equivalent behavior with the syntax (parameters) => { }.
dotnet_diagnostic.SA1131.severity = error # A comparison was made between a variable and a literal or constant value, and the variable appeared on the right-hand side of the expression.
dotnet_diagnostic.SA1132.severity = error # Two or more fields were declared in the same field declaration syntax.
dotnet_diagnostic.SA1133.severity = error # Two or more attributes appeared within the same set of square brackets.
dotnet_diagnostic.SA1134.severity = error # An attribute is placed on the same line of code as another attribute or element.
dotnet_diagnostic.SA1135.severity = error # A using directive is not qualified.
dotnet_diagnostic.SA1136.severity = error # Multiple enum values are placed on the same line of code.
dotnet_diagnostic.SA1137.severity = error # Two sibling elements which each start on their own line have different levels of indentation.
dotnet_diagnostic.SA1139.severity = error # Use literal suffix notation instead of casting.
dotnet_diagnostic.SA1141.severity = error # Use tuple syntax instead of the underlying ValueTuple implementation type.
dotnet_diagnostic.SA1142.severity = error # An element of a tuple was referenced by its metadata name when an element name is available.
dotnet_diagnostic.SA1200.severity = none  # Using directive should appear within a namespace declaration.
dotnet_diagnostic.SA1201.severity = error # An element within a C# code file is out of order in relation to the other elements in the code.
dotnet_diagnostic.SA1202.severity = error # An element within a C# code file is out of order within regard to access level, in relation to other elements in the code.
dotnet_diagnostic.SA1203.severity = error # A constant field is placed beneath a non-constant field.
dotnet_diagnostic.SA1204.severity = error # A static element is positioned beneath an instance element of the same type.
dotnet_diagnostic.SA1205.severity = error # The partial element does not have an access modifier defined.
dotnet_diagnostic.SA1206.severity = none # The keywords within the declaration of an element do not follow a standard ordering scheme. Conflicts with IDE ordering recommendation.
dotnet_diagnostic.SA1207.severity = error # The keyword protected is positioned after the keyword internal within the declaration of a protected internal C# element.
dotnet_diagnostic.SA1208.severity = error # A using directive which declares a member of the System namespace appears after a using directive which declares a member of a different namespace, within a C# code file.
dotnet_diagnostic.SA1209.severity = error # A using-alias directive is positioned before a regular using directive.
dotnet_diagnostic.SA1210.severity = error # The using directives within a C# code file are not sorted alphabetically by namespace.
dotnet_diagnostic.SA1211.severity = error # The using-alias directives within a C# code file are not sorted alphabetically by alias name.
dotnet_diagnostic.SA1212.severity = error # A get accessor appears after a set accessor within a property or indexer.
dotnet_diagnostic.SA1213.severity = error # An add accessor appears after a remove accessor within an event.
dotnet_diagnostic.SA1214.severity = error # A readonly field is positioned beneath a non-readonly field.
dotnet_diagnostic.SA1215.severity = error # An instance readonly element is positioned beneath an instance non-readonly element of the same type.
dotnet_diagnostic.SA1216.severity = error # A using static directive is positioned at the wrong location (before a regular using directive or after an alias using directive).
dotnet_diagnostic.SA1217.severity = error # The using static directives within a C# code file are not sorted alphabetically by full type name.
dotnet_diagnostic.SA1300.severity = error # Naming rules # The name of a C# element does not begin with an upper-case letter.
dotnet_diagnostic.SA1301.severity = error # There are currently no situations in which this rule will fire.
dotnet_diagnostic.SA1302.severity = error # The name of a C# interface does not begin with the capital letter I.
dotnet_diagnostic.SA1303.severity = error # The name of a constant C# field should begin with an upper-case letter.
dotnet_diagnostic.SA1304.severity = error # The name of a non-private readonly C# field should being with an upper-case letter.
dotnet_diagnostic.SA1305.severity = error # The name of a field or variable in C# uses Hungarian notation. - false positives.
dotnet_diagnostic.SA1306.severity = error # The name of a field in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1307.severity = error # The name of a public or internal field in C# does not begin with an upper-case letter.
dotnet_diagnostic.SA1308.severity = error # A field name in C# is prefixed with m_ or s_.
dotnet_diagnostic.SA1309.severity = error # A field name in C# begins with an underscore.
dotnet_diagnostic.SA1310.severity = error # A field name in C# contains an underscore.
dotnet_diagnostic.SA1311.severity = error # The name of a static readonly field does not begin with an upper-case letter.
dotnet_diagnostic.SA1312.severity = error # The name of a variable in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1313.severity = error # The name of a parameter in C# does not begin with a lower-case letter.
dotnet_diagnostic.SA1314.severity = error # The name of a C# type parameter does not begin with the capital letter T.
dotnet_diagnostic.SA1316.severity = error # Element names within a tuple type should have the correct casing.
dotnet_diagnostic.SA1400.severity = error # The access modifier for a C# element has not been explicitly defined.
dotnet_diagnostic.SA1401.severity = error # A field within a C# class has an access modifier other than private.
dotnet_diagnostic.SA1402.severity = error # A C# code file contains more than one unique type.
dotnet_diagnostic.SA1403.severity = error # A C# code file contains more than one namespace.
dotnet_diagnostic.SA1404.severity = error # A Code Analysis SuppressMessage attribute does not include a justification.
dotnet_diagnostic.SA1405.severity = error # A call to Debug.Assert in C# code does not include a descriptive message.
dotnet_diagnostic.SA1406.severity = error # A call to Debug.Fail in C# code does not include a descriptive message.
dotnet_diagnostic.SA1407.severity = error # A C# statement contains a complex arithmetic expression which omits parenthesis around operators.
dotnet_diagnostic.SA1408.severity = error # A C# statement contains a complex conditional expression which omits parenthesis around operators.
dotnet_diagnostic.SA1409.severity = error # A C# file contains code which is unnecessary and can be removed without changing the overall logic of the code.
dotnet_diagnostic.SA1410.severity = error # A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis.
dotnet_diagnostic.SA1411.severity = error # An attribute declaration does not contain any parameters, yet it still includes parenthesis.
dotnet_diagnostic.SA1412.severity = none  # The encoding of the file is not UTF-8 with byte order mark.
dotnet_diagnostic.SA1413.severity = error  # A multi-line initializer should use a comma on the last item.
dotnet_diagnostic.SA1414.severity = error # Tuple types appearing in member declarations should have explicitly named tuple elements.
dotnet_diagnostic.SA1500.severity = error # Layout rules # The opening or closing brace within a C# statement, element, or expression is not placed on its own line.
dotnet_diagnostic.SA1501.severity = error # A C# statement containing opening and closing braces is written completely on a single line.
dotnet_diagnostic.SA1502.severity = error # A C# element containing opening and closing braces is written completely on a single line.
dotnet_diagnostic.SA1503.severity = error # The opening and closing braces for a C# statement have been omitted.
dotnet_diagnostic.SA1504.severity = error # Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines.
dotnet_diagnostic.SA1505.severity = error # An opening brace within a C# element, statement, or expression is followed by a blank line.
dotnet_diagnostic.SA1506.severity = error # An element documentation header above a C# element is followed by a blank line.
dotnet_diagnostic.SA1507.severity = error # The C# code contains multiple blank lines in a row.
dotnet_diagnostic.SA1508.severity = error # A closing brace within a C# element, statement, or expression is preceded by a blank line.
dotnet_diagnostic.SA1509.severity = error # An opening brace within a C# element, statement, or expression is preceded by a blank line.
dotnet_diagnostic.SA1510.severity = error # Chained C# statements are separated by a blank line.
dotnet_diagnostic.SA1511.severity = error # The while footer at the bottom of a do-while statement is separated from the statement by a blank line.
dotnet_diagnostic.SA1512.severity = none  # A single-line comment within C# code is followed by a blank line. # Acceptable
dotnet_diagnostic.SA1513.severity = error # A closing brace within a C# element, statement, or expression is not followed by a blank line.
dotnet_diagnostic.SA1514.severity = error # An element documentation header above a C# element is not preceded by a blank line.
dotnet_diagnostic.SA1515.severity = none  # A single-line comment within C# code is not preceded by a blank line. # Acceptable
dotnet_diagnostic.SA1516.severity = error # Adjacent C# elements are not separated by a blank line.
dotnet_diagnostic.SA1517.severity = error # The code file has blank lines at the start.
dotnet_diagnostic.SA1518.severity = error # The line endings at the end of a file do not match the settings for the project.
dotnet_diagnostic.SA1519.severity = error # The opening and closing braces for a multi-line C# statement have been omitted.
dotnet_diagnostic.SA1520.severity = error # The opening and closing braces of a chained if/else if/else construct were included for some clauses, but omitted for others.
dotnet_diagnostic.SA1600.severity = none  # Elements must be documented
dotnet_diagnostic.SA1601.severity = none  # Partial elements must be documented
dotnet_diagnostic.SA1602.severity = none  # Enumeration items must be documented
dotnet_diagnostic.SA1603.severity = none  # Documentation Must Contain Valid XML
dotnet_diagnostic.SA1604.severity = none  # Element documentation must have summary
dotnet_diagnostic.SA1605.severity = none  # Partial element documentation must have summary
dotnet_diagnostic.SA1606.severity = none  # Element documentation must have summary text
dotnet_diagnostic.SA1607.severity = none  # Partial element documentation must have summary text
dotnet_diagnostic.SA1608.severity = none  # Element documentation must not have default summary
dotnet_diagnostic.SA1609.severity = none  # Property Documentation Must Have Value. - Too often just a repeat of the summary.
dotnet_diagnostic.SA1610.severity = none  # Property Documentation Must Have Value Text
dotnet_diagnostic.SA1611.severity = none  # Element parameters must be documented
dotnet_diagnostic.SA1612.severity = none  # Element parameter documentation must match element parameters
dotnet_diagnostic.SA1613.severity = none  # Element parameter documentation must declare parameter name
dotnet_diagnostic.SA1614.severity = none  # Element parameter documentation must have text.
dotnet_diagnostic.SA1615.severity = none  # Element return value must be documented
dotnet_diagnostic.SA1616.severity = none  # Element return value documentation must have text
dotnet_diagnostic.SA1617.severity = none  # Void return value must not be documented
dotnet_diagnostic.SA1618.severity = none  # Generic type parameters must be documented
dotnet_diagnostic.SA1619.severity = none  # Generic type parameters must be documented partial class
dotnet_diagnostic.SA1620.severity = none  # Generic type parameter documentation must match type parameters
dotnet_diagnostic.SA1621.severity = none  # Generic type parameter documentation must declare parameter name
dotnet_diagnostic.SA1622.severity = none  # Generic type parameter docuemntation must have text
dotnet_diagnostic.SA1623.severity = none  # Property Summary Documentation Must Match Accessors
dotnet_diagnostic.SA1624.severity = none  # Property Summary Documentation Must Omit Set Accessor With Restricted Access
dotnet_diagnostic.SA1625.severity = none  # Element documentation must not be copied and pasted
dotnet_diagnostic.SA1626.severity = error # Single line comments must not use documentation style slashes
dotnet_diagnostic.SA1627.severity = none  # Documentation text must not be empty
dotnet_diagnostic.SA1628.severity = none  # Documentation Text Must Begin With A Capital Letter
dotnet_diagnostic.SA1629.severity = none  # Documentation Text Must End With A Period
dotnet_diagnostic.SA1630.severity = none  # Documentation text must contain whitespace
dotnet_diagnostic.SA1631.severity = none  # Documentation Must Meet Character Percentage
dotnet_diagnostic.SA1632.severity = none  # Documentation Text Must Meet Minimum Character Length
dotnet_diagnostic.SA1633.severity = none  # File must have header. # IDE0073 now covers the same thing and is the one we configure.
dotnet_diagnostic.SA1634.severity = error # File header must show copyright
dotnet_diagnostic.SA1635.severity = error # File header must have copyright text
dotnet_diagnostic.SA1636.severity = error # The file header at the top of a C# code file does not contain the appropriate copyright text.
dotnet_diagnostic.SA1637.severity = none  # File header must contain file name # IDE0073 now covers the same thing and is the one we configure.
dotnet_diagnostic.SA1638.severity = none  # File header file name documentation must match file name # Repitition that doesn't auto-refactor
dotnet_diagnostic.SA1639.severity = none  # File Header Must Have Summary # IDE0073 now covers the same thing and is the one we configure.
dotnet_diagnostic.SA1640.severity = none  # File header must have valid company text # IDE0073 now covers the same thing and is the one we configure.
dotnet_diagnostic.SA1641.severity = error # The file header at the top of a C# code file does not contain the appropriate company name text.
dotnet_diagnostic.SA1642.severity = none  # Constructor summary documentation must begin with standard text
dotnet_diagnostic.SA1643.severity = none  # Destructor summary documentation must begin with standard text
dotnet_diagnostic.SA1644.severity = error # Documentation Headers Must Not Contain Blank Lines
dotnet_diagnostic.SA1645.severity = error # An included Xml documentation file does not exist.
dotnet_diagnostic.SA1646.severity = error # Included Documentation XPath Does Not Exist
dotnet_diagnostic.SA1647.severity = error # Include Node Does Not Contain Valid File And Path
dotnet_diagnostic.SA1648.severity = error # Inherit doc must be used with inheriting class
dotnet_diagnostic.SA1649.severity = error # The file name of a C# code file does not match the first type declared in the file.
dotnet_diagnostic.SA1650.severity = error # Element Documentation Must Be Spelled Correctly
dotnet_diagnostic.SA1651.severity = error # The documentation for the element contains one or more <placeholder> elements.
dotnet_diagnostic.SA1652.severity = error # Enable XML documentation output
